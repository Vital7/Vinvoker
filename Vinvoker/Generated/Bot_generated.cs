// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the data builder generator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Vinvoker.Interfaces {
	public interface IBot {
		public ArchiSteamFarm.Steam.Interaction.Actions Actions { get; }
		public ArchiSteamFarm.Steam.Integration.ArchiHandler ArchiHandler { get; }
		public ArchiSteamFarm.NLog.ArchiLogger ArchiLogger { get; }
		public ArchiSteamFarm.Steam.Integration.ArchiWebHandler ArchiWebHandler { get; }
		public System.String BotName { get; }
		public ArchiSteamFarm.Steam.Cards.CardsFarmer CardsFarmer { get; }
		public ArchiSteamFarm.Steam.Interaction.Commands Commands { get; }
		public System.UInt32 GamesToRedeemInBackgroundCount { get; }
		public System.Boolean HasMobileAuthenticator { get; }
		public System.Boolean IsConnectedAndLoggedOn { get; }
		public System.Boolean IsPlayingPossible { get; }
		public SteamKit2.SteamApps SteamApps { get; }
		public SteamKit2.SteamConfiguration SteamConfiguration { get; }
		public SteamKit2.SteamFriends SteamFriends { get; }
		public SteamKit2.EAccountFlags AccountFlags { get; }
		public ArchiSteamFarm.Steam.Storage.BotConfig BotConfig { get; }
		public System.Boolean KeepRunning { get; }
		public System.String Nickname { get; }
		public System.Collections.Immutable.ImmutableDictionary<System.UInt32,System.ValueTuple<SteamKit2.EPaymentMethod,System.DateTime>> OwnedPackageIDs { get; }
		public ArchiSteamFarm.Core.ASF.EUserInputType RequiredInput { get; }
		public System.UInt64 SteamID { get; }
		public System.Int64 WalletBalance { get; }
		public SteamKit2.ECurrencyCode WalletCurrency { get; }
		public System.Threading.Tasks.ValueTask DisposeAsync();
		public System.Threading.Tasks.Task<System.Boolean> DeleteAllRelatedFiles();
		public System.String GetFilePath(ArchiSteamFarm.Steam.Bot.EFileType fileType);
		public System.Threading.Tasks.Task<System.Collections.Generic.HashSet<System.UInt32>> GetPossiblyCompletedBadgeAppIDs();
		public System.Threading.Tasks.Task<System.Nullable<System.Byte>> GetTradeHoldDuration(System.UInt64 steamID, System.UInt64 tradeID);
		public System.Boolean HasAccess(System.UInt64 steamID, ArchiSteamFarm.Steam.Storage.BotConfig.EAccess access);
		public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.UInt32,System.Byte>> LoadCardsPerSet(System.Collections.Generic.IReadOnlyCollection<System.UInt32> appIDs);
		public System.Threading.Tasks.Task<System.Boolean> SendMessage(System.UInt64 steamID, System.String message);
		public System.Threading.Tasks.Task<System.Boolean> SendMessage(System.UInt64 chatGroupID, System.UInt64 chatID, System.String message);
		public System.Boolean SetUserInput(ArchiSteamFarm.Core.ASF.EUserInputType inputType, System.String inputValue);
	}
}

namespace Vinvoker.Implementations {
	public class ASFBot : Vinvoker.Interfaces.IBot {
		public ASFBot(ArchiSteamFarm.Steam.Bot implementation) => Implementation = implementation;
		private readonly ArchiSteamFarm.Steam.Bot Implementation;
		public ArchiSteamFarm.Steam.Interaction.Actions Actions => Implementation.Actions;
		public ArchiSteamFarm.Steam.Integration.ArchiHandler ArchiHandler => Implementation.ArchiHandler;
		public ArchiSteamFarm.NLog.ArchiLogger ArchiLogger => Implementation.ArchiLogger;
		public ArchiSteamFarm.Steam.Integration.ArchiWebHandler ArchiWebHandler => Implementation.ArchiWebHandler;
		public System.String BotName => Implementation.BotName;
		public ArchiSteamFarm.Steam.Cards.CardsFarmer CardsFarmer => Implementation.CardsFarmer;
		public ArchiSteamFarm.Steam.Interaction.Commands Commands => Implementation.Commands;
		public System.UInt32 GamesToRedeemInBackgroundCount => Implementation.GamesToRedeemInBackgroundCount;
		public System.Boolean HasMobileAuthenticator => Implementation.HasMobileAuthenticator;
		public System.Boolean IsConnectedAndLoggedOn => Implementation.IsConnectedAndLoggedOn;
		public System.Boolean IsPlayingPossible => Implementation.IsPlayingPossible;
		public SteamKit2.SteamApps SteamApps => Implementation.SteamApps;
		public SteamKit2.SteamConfiguration SteamConfiguration => Implementation.SteamConfiguration;
		public SteamKit2.SteamFriends SteamFriends => Implementation.SteamFriends;
		public SteamKit2.EAccountFlags AccountFlags => Implementation.AccountFlags;
		public ArchiSteamFarm.Steam.Storage.BotConfig BotConfig => Implementation.BotConfig;
		public System.Boolean KeepRunning => Implementation.KeepRunning;
		public System.String Nickname => Implementation.Nickname;
		public System.Collections.Immutable.ImmutableDictionary<System.UInt32,System.ValueTuple<SteamKit2.EPaymentMethod,System.DateTime>> OwnedPackageIDs => Implementation.OwnedPackageIDs;
		public ArchiSteamFarm.Core.ASF.EUserInputType RequiredInput => Implementation.RequiredInput;
		public System.UInt64 SteamID => Implementation.SteamID;
		public System.Int64 WalletBalance => Implementation.WalletBalance;
		public SteamKit2.ECurrencyCode WalletCurrency => Implementation.WalletCurrency;
		public System.Threading.Tasks.ValueTask DisposeAsync() => Implementation.DisposeAsync();
		public System.Threading.Tasks.Task<System.Boolean> DeleteAllRelatedFiles() => Implementation.DeleteAllRelatedFiles();
		public System.String GetFilePath(ArchiSteamFarm.Steam.Bot.EFileType fileType) => Implementation.GetFilePath(fileType);
		public System.Threading.Tasks.Task<System.Collections.Generic.HashSet<System.UInt32>> GetPossiblyCompletedBadgeAppIDs() => Implementation.GetPossiblyCompletedBadgeAppIDs();
		public System.Threading.Tasks.Task<System.Nullable<System.Byte>> GetTradeHoldDuration(System.UInt64 steamID, System.UInt64 tradeID) => Implementation.GetTradeHoldDuration(steamID, tradeID);
		public System.Boolean HasAccess(System.UInt64 steamID, ArchiSteamFarm.Steam.Storage.BotConfig.EAccess access) => Implementation.HasAccess(steamID, access);
		public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.UInt32,System.Byte>> LoadCardsPerSet(System.Collections.Generic.IReadOnlyCollection<System.UInt32> appIDs) => Implementation.LoadCardsPerSet(appIDs);
		public System.Threading.Tasks.Task<System.Boolean> SendMessage(System.UInt64 steamID, System.String message) => Implementation.SendMessage(steamID, message);
		public System.Threading.Tasks.Task<System.Boolean> SendMessage(System.UInt64 chatGroupID, System.UInt64 chatID, System.String message) => Implementation.SendMessage(chatGroupID, chatID, message);
		public System.Boolean SetUserInput(ArchiSteamFarm.Core.ASF.EUserInputType inputType, System.String inputValue) => Implementation.SetUserInput(inputType, inputValue);
	}
}
